id: Template2
schema: "1"
metadata:
  name: Dynamic template
  description: This template supports enable/disable steps with ingress, smoke test, and deployments from stage to prod.
  owner: marcelo.lima@bexsbanco.com.br
  scopes: [global]
protected: false
variables:
- name: application
  type: string
- name: service
  description: the service name without sufix
  type: string
- name: config
  description: deplo service to address
  type: object
  defaultValue:
    ports:
     - port: 8081
       name: "http"
     - port: 6568
       name: "grpc"
    stage:
     configmap:
       - name: env-config-v001
     secret:
       - name: datastore
         mount: "/secret"
         secretName: datastore-cert
    sandbox:
     configmap:
       - name: env-config-v001
     secret:
       - name: datastore
         mount: "/secret"
         secretName: datastore-cert
     ingress:
       fqdn: sandbox.bexs.com.br
       paths:
         - path: /v1/consumer.*
           port: 8081
    prod:
     configmap:
       - name: env-config-v001
     secret:
       - name: datastore
         mount: "/secret"
         secretName: datastore-cert
     ingress:
       fqdn: internals.bexs.com.br
       paths:
         - path: /v1/consumer.*
           port: 8081
- name: liveness
  description: the method for check if container is live
  defaultValue: |
    httpGet:
      path: /healthz
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 30      
    successThreshold: 1
    failureThreshold: 1
    timeoutSeconds: 3
- name: readiness
  description: the method for check if container is read
  defaultValue: |
    httpGet:
      path: /healthz
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 30      
    successThreshold: 1
    failureThreshold: 1
    timeoutSeconds: 3
- name: functional_tests
  description: Enable the execution of functional tests on stage
  type: boolean
  defaultValue: true
- name: sandbox_deploy
  description: deploy on sandbox
  type: boolean
  defaultValue: true
- name: sandbox_test
  description: execute the test in sandbox
  type: boolean
  defaultValue: true
- name: production_deploy
  defaultValue: false
  description: deploy to production
  type: boolean
  defaultValue: true
- name: production_test
  defaultValue: false
  description: execute tests in production env
  type: boolean
  defaultValue: false
configuration:
 concurrentExecutions:
  limitConcurrent: true
 triggers: 
  - enabled: true
    job: "{{service}}-service/job/develop"
    master: jenkins
    propertyFile: "spinnaker.properties"
    type: jenkins
 notifications:
  - address: "bexspay-team"
    level: "pipeline"
    type: "slack"
    when: 
     - "pipeline.starting"
     - "pipeline.complete"
     - "pipeline.failed"
stages:
 - id: Deploy to Stage
   type: deployManifest
   stageTimeoutMs: 60000
   manifestArtifactAccount: embedded-artifactports
   config: |
      {% module kubemanifest name=service target="stage" ns=application config=config secret=config.stage.secret maps=config.stage.configmap %}
 - id: Config Stage Ingress
   type: deployManifest
   stageTimeoutMs: 60000
   dependsOn:
    - Deploy to Stage
   manifestArtifactAccount: embedded-artifactports
   config: |
     {% module ingress name=service ns=application ingress=config.stage.ingress target="stage" %}
   when:
    - "{{config.stage.ingress != null}}"
 - id: Automated Tests
   dependsOn:
    - Config Stage Ingress
   continuePipeline: false
   stageTimeoutMs: 60000
   type: jenkins
   failPipeline: true
   config:
     job: "{{service}}-tests/job/develop"
     master: jenkins
     name: Automated Tests
     notifications:
      - address: "bexspay-team"
        level: "stage"
        type: "slack"
        when: 
        - "stage.complete"
        - "stage.failed"
     sendNotifications: true
   when:
    - "{{ functional_tests == true }}"
 - id: Deploy to Sandbox
   type: deployManifest
   dependsOn:
    - Automated Tests
   stageTimeoutMs: 60000
   manifestArtifactAccount: embedded-artifact
   config: |
      {% module kubemanifest name=service target="sandbox" ns=application config=config secret=config.sandbox.secret maps=config.sandbox.configmap %}
   when:
    - "{{sandbox_deploy == true}}"
 - id: Configuring Sandbox Ingress
   type: deployManifest
   stageTimeoutMs: 60000
   dependsOn:
    - Deploy to Sandbox
   manifestArtifactAccount: embedded-artifactports
   config: |
     {% module ingress name=service ns=application ingress=config.sandbox.ingress target="sandbox" %}
   when:
    - "{{config.sandbox.ingress != null && sandbox_deploy == true}}"
 - id: Sandbox Smoke Test
   dependsOn:
    - Configuring Sandbox Ingress
   continuePipeline: false
   stageTimeoutMs: 60000
   type: jenkins
   failPipeline: true
   config:
     job: "{{service}}-tests/job/sandbox"
     master: jenkins
     name: Sandbox Smoke Test
     notifications:
      - address: "bexspay-team"
        level: "stage"
        type: "slack"
        when: 
        - "stage.complete"
        - "stage.failed"
     sendNotifications: true
   when:
    - "{{ sandbox_test == true && sandbox_deploy == true }}"
 - id: Deploy to Prod
   type: deployManifest
   dependsOn:
    - Sandbox Smoke Test
   stageTimeoutMs: 60000
   manifestArtifactAccount: embedded-artifact
   config: |
      {% module kubemanifest name=service target="prod" ns=application config=config secret=config.prod.secret maps=config.prod.configmap %}
   when:
    - "{{production_deploy == true}}"
 - id: Config Prod Ingress
   type: deployManifest
   stageTimeoutMs: 60000
   dependsOn:
    - Deploy to Prod
   manifestArtifactAccount: embedded-artifactports
   config: |
     {% module ingress name=service ns=application ingress=config.prod.ingress target="prod" %}
   when:
    - "{{config.prod.ingress != null && production_deploy == true}}"
 - id: Prod Smoke Test
   dependsOn:
    - Config Prod Ingress
   continuePipeline: false
   stageTimeoutMs: 60000
   type: jenkins
   failPipeline: true
   config:
     job: "{{service}}-tests/job/prod"
     master: jenkins
     name: Prod Smoke Test
     notifications:
      - address: "bexspay-team"
        level: "stage"
        type: "slack"
        when: 
        - "stage.complete"
        - "stage.failed"
     sendNotifications: true
   when:
    - "{{ production_test == true && production_deploy == true }}"
modules:
- id: kubemanifest
  usage: The k8s deployer
  variables:
   - name: name
   - name: target
   - name: ns
   - name: config
     type: object
   - name: secret
     type: object
   - name: maps
     type: object
   - name: liveness
     type: object
   - name: readiness
     type: object
  definition:
    manifestSource: text
    account: spinnaker-service-account
    cloudProvider: kubernetes
    notifications:
    - address: "bexspay-team"
      level: "stage"
      type: "slack"
      when: 
      - "stage.failed"
    sendNotifications: true
    moniker:
      app: "{{application}}"
    manifests:
    - apiVersion: v1
      kind: Service
      metadata:
        name: "{{name}}-service"
        namespace: "{{ns}}-{{target}}"
      spec:
        type: "ClusterIP"
        selector:
          app:  "{{name}}"
        ports: |
          {% for port in config.ports %}
          - {% module portMapping svcname=port.name svcport=port.port %}
          {% endfor %}
    - apiVersion: extensions/v1beta1
      kind: Deployment
      metadata:
        name: "{{name}}-deployment"
        namespace: "{{ns}}-{{target}}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: "{{name}}"
        strategy:
          rollingUpdate:
            maxSurge: 1
            maxUnavailable: 1
          type: RollingUpdate
        template:
          metadata:
            labels:
              app: "{{name}}"
          spec:
            containers:
              - image: "${ trigger[\"properties\"][\"ci.image\"] }"
                imagePullPolicy: IfNotPresent
                name: "{{name}}"
                volumeMounts:
                  - name: "config"
                    mountPath: "/app/config"
                envFrom: |
                  {% for map in maps.env %}
                  - {% module configMap mapname=map.name %}
                  {% endfor %}
                livenessProbe: "{{liveness}}"
                readinessProbe: "{{readiness}}"
            restartPolicy: "Always"
            volumes: 
              - name: "config"
                secret:
                  secretName: "{{secret.name}}"
                  items: "{{secret.items}}"
                configMap:
                  name: "{{maps.file.name}}"
                  items: "{{maps.file.items}}"
- id: portMapping
  variables:
   - name: svcport
   - name: svcname
  definition:
    name: "{{svcname}}"
    port: "{{svcport}}" 
    targetPort: "{{svcport}}"
- id: configMap
  variables:
   - name: mapname
  definition:
    configMapRef:
      name: "{{mapname}}"
      
- id: ingress
  variables:
    - name: name
    - name: ns
    - name: target
    - name: ingress
      type: object
  definition:
    manifestSource: text
    account: spinnaker-service-account
    cloudProvider: kubernetes
    notifications:
    - address: "bexspay-team"
      level: "stage"
      type: "slack"
      when:   
      - "stage.failed"
    sendNotifications: true
    moniker:  
      app: "{{ns}}"
    manifests:
     - apiVersion: extensions/v1beta1
       kind: Ingress
       metadata:  
         annotations:
           kubernetes.io/ingress.class: istio
         name: "{{name}}-ingress"
         namespace: "{{ns}}-{{target}}"
       spec:
         rules: |
           {% for item in ingress.paths %}
           - {% module ingressItem inghost=ingress.fqdn name=name ingpaths=ingress.paths %}
           {% endfor %}
- id: ingressItem
  variables:
   - name: inghost
   - name: name
   - name: ingpaths
  definition:
    host: "{{inghost}}"
    http:
      paths: |
        {% for path in ingpaths %}
        - {% module ingressPath name=name port=path.port url=path.path %}
        {% endfor %} 
- id: ingressPath
  variables:
   - name: name
   - name: port
   - name: url
  definition:
    backend:
      serviceName: "{{name}}-service"
      servicePort: "{{port}}"
    path: "{{url}}"
   
  