id: Template2
schema: "1"
metadata:
  name: Template2
  description: Modules example template
  owner: marcelo.lima@bexsbanco.com.br
  scopes: [global]
protected: false
variables:
- name: application
  type: string
- name: service
  description: the service name without sufix
  type: string
- name: namespace
  description: the prefix of the namespaces
  type: string
- name: ports
  description: description of the service port
  type: object
  defaultValue:
    items:
     - port: 8080
       name: "http"
     - port: 6568
       name: "grpc"
- name: stage
  description: deploy on stage
  type: boolean
  defaultValue: true
- name: sandbox
  description: deploy on sandbox6565
  type: boolean
  defaultValue: false
- name: production
  defaultValue: false
  description: deploy to production
  type: boolean
  defaultValue: false
configuration:
 concurrentExecutions:
  limitConcurrent: true
 triggers: 
  - enabled: true
    job: "{{service}}-service/job/develop"
    master: jenkins
    propertyFile: "spinnaker.properties"
    type: jenkins
stages:
 - id: Deploy to Stage
   type: deployManifest
   stageTimeoutMs: 60000
   manifestArtifactAccount: embedded-artifact
   config: |
      {% module kubemanifest name=service target="stage" ns=namespace ports=ports %}
modules:
- id: kubemanifest
  usage: The k8s deployer
  variables:
   - name: name
   - name: target
   - name: ns
   - name: ports
     type: object
  definition:
    manifestSource: text
    account: spinnaker-service-account
    cloudProvider: kubernetes
    notifications:
    - address: "bexspay-team"
      level: "stage"
      type: "slack"
      when: 
      - "stage.failed"
    sendNotifications: true
    moniker:
      app: "{{application}}"
    manifests:
    - apiVersion: v1
      kind: Service
      metadata:
        name: "{{name}}-service"
        namespace: "{{ns}}-{{target}}"
      spec:
        type: "ClusterIP"
        selector:
          app:  "{{name}}"
        ports: |
          {% for port in ports.items %}
          - {% module portMapping svcname=port.name svcport=port.port %}
          {% endfor %}
- id: portMapping
  variables:
   - name: svcport
   - name: svcname
  definition:
    name: "{{svcname}}"
    port: "{{svcport}}" 
    targetPort: "{{svcport}}"