id: Template2
schema: "1"
metadata:
  name: Template2
  description: Modules example template
  owner: marcelo.lima@bexsbanco.com.br
  scopes: [global]
protected: false
variables:
- name: application
  type: string
- name: service
  description: the service name without sufix
  type: string
- name: config
  description: description of the service port
  type: object
  defaultValue:
    ports:
     - port: 8081
       name: "http"
     - port: 6568
       name: "grpc"
    configmap:
     - stage:
       - name: env-config-v001
     - sandbox:
       - name: env-config-v001
     - prod:
       - name: env-config-v001
    secret:
     - stage:
       - name: datastore
         path: /secret
         secretName: datastore-cert
     - sandbox:
       - name: datastore
         path: /secret
         secretName: datastore-cert
     - prod:
       - name: datastore
         path: /secret
         secretName: datastore-cert
- name: stage
  description: deploy on stage
  type: boolean
  defaultValue: true
- name: sandbox
  description: deploy on sandbox6565
  type: boolean
  defaultValue: false
- name: production
  defaultValue: false
  description: deploy to production
  type: boolean
  defaultValue: false
configuration:
 concurrentExecutions:
  limitConcurrent: true
 triggers: 
  - enabled: true
    job: "{{service}}-service/job/develop"
    master: jenkins
    propertyFile: "spinnaker.properties"
    type: jenkins
stages:
 - id: Deploy to Stage
   type: deployManifest
   stageTimeoutMs: 60000
   manifestArtifactAccount: embedded-artifactports
   config: |
      {% module kubemanifest name=service target="stage" ns=application config=config secrets=config.configmap.stage %}
 - id: Automated Tests
   refId: 2
   dependsOn:
    - Deploy to Stage
   continuePipeline: false
   stageTimeoutMs: 60000
   type: jenkins
   failPipeline: true
   config:
     job: "{{service}}-tests/job/develop"
     master: jenkins
     name: Automated Tests
     notifications:
      - address: "bexspay-team"
        level: "stage"
        type: "slack"
        when: 
        - "stage.complete"
        - "stage.failed"
     sendNotifications: true
 - id: Deploy to Sandbox
   refId: 3
   type: deployManifest
   dependsOn:
    - Automated Tests
   stageTimeoutMs: 60000
   manifestArtifactAccount: embedded-artifact
   config: |
      {% module kubemanifest name=service target="sandbox" ns=application config=config secrets=config.configmap.sandbox %}
 - id: Deploy to Prod
   refId: 3
   type: deployManifest
   dependsOn:
    - Deploy to Sandbox
   stageTimeoutMs: 60000
   manifestArtifactAccount: embedded-artifact
   config: |
      {% module kubemanifest name=service target="prod" ns=application config=config secrets=config.configmap.prod %}
modules:
- id: kubemanifest
  usage: The k8s deployer
  variables:
   - name: name
   - name: target
   - name: ns
   - name: config
     type: object
   - name: secrets
     type: object
  definition:
    manifestSource: text
    account: spinnaker-service-account
    cloudProvider: kubernetes
    notifications:
    - address: "bexspay-team"
      level: "stage"
      type: "slack"
      when: 
      - "stage.failed"
    sendNotifications: true
    moniker:
      app: "{{application}}"
    manifests:
    - apiVersion: v1
      kind: Service
      metadata:
        name: "{{name}}-service"
        namespace: "{{ns}}-{{target}}"
      spec:
        type: "ClusterIP"
        selector:
          app:  "{{name}}"
        ports: |
          {% for port in config.ports %}
          - {% module portMapping svcname=port.name svcport=port.port %}
          {% endfor %}
    - apiVersion: extensions/v1beta1
      kind: Deployment
      metadata:
        name: "{{name}}-deployment"
        namespace: "{{ns}}-{{target}}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: "{{name}}"
        strategy:
          rollingUpdate:
            maxSurge: 1
            maxUnavailable: 1
          type: RollingUpdate
        template:
          metadata:
            labels:
              app: "{{name}}"
          spec:
            containers:
              - image: "${ trigger[\"properties\"][\"ci.image\"] }"
                imagePullPolicy: IfNotPresent
                name: "{{name}}"
                volumeMounts: |
                  {% for secret in secrets %}
                  - {% module mountVolume name=secret.name path=secret.path %}
                  {% endfor %}
                envFrom:
                  - configMapRef:
                      name: "env-config-v001"
            restartPolicy: "Always"
            volumes:
              - name: datastore
                secret:
                  secretName: datastore-cert
- id: portMapping
  variables:
   - name: svcport
   - name: svcname
  definition:
    name: "{{svcname}}"
    port: "{{svcport}}" 
    targetPort: "{{svcport}}"
- id: mountVolume:
  variables:
   - name: name
   - path: path
  definition:
    name: "{{name}}"
    mountPath: "{{path}}"
    